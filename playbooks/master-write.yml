- hosts: master
  become: true
  tasks:
  - name: "Run pgbench (async)"
    shell: "/usr/lib/postgresql/9.1/bin/pgbench -i -s ${SCALE_FACTOR} -c ${CLIENTS} -j ${THREADS} ${NO_VACUUM} -t ${TRANSACTIONS} root"
    register: pgbench
    environment:
      SCALE_FACTOR: 10 # Multiply the number of rows generated by the scale factor. For example, -s 100 will create 10,000,000 rows in the pgbench_accounts table. Default is 1.
      CLIENTS: 4 # Number of clients simulated, that is, number of concurrent database sessions. Default is 1.
      THREADS: 4 # Number of worker threads within pgbench. Using more than one thread can be helpful on multi-CPU machines. The number of clients must be a multiple of the number of threads, since each thread is given the same number of client sessions to manage. Default is 1.
      NO_VACUUM: -n # Perform no vacuuming before running the test. This option is necessary if you are running a custom test scenario that does not include the standard tables pgbench_accounts, pgbench_branches, pgbench_history, and pgbench_tellers.
      TRANSACTIONS: 50 # Number of transactions each client runs. Default is 10.
    async: 300
    poll: 0
  - name: "Write to PostgreSQL (sync)"
    shell: "/vagrant/scripts/master-write.sh"
  - name: "Await pgbench (sync)"
    async_status: jid={{ pgbench.ansible_job_id }}
    register: pgbench_result
    until: pgbench_result.finished
    delay: 5
    retries: 100
  - debug: var=pgbench_result.stderr
